Part I – Queries for SoftUni Database
1. Employees with Salary Above 35000
DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
	SELECT e.first_name, e.last_name
	FROM employees AS e
	WHERE e.salary > 35000
	ORDER BY e.first_name, e.last_name, e.employee_id;
END $$
DELIMITER ;

CALL usp_get_employees_salary_above_35000();

2. Employees with Salary Above Number
DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above(selected_salary DECIMAL(19,4))
BEGIN
	SELECT e.first_name, e.last_name
	FROM employees AS e
	WHERE e.salary >= selected_salary
	ORDER BY e.first_name, e.last_name, e.employee_id;
END $$
DELIMITER ;

CALL usp_get_employees_salary_above(48100);

3. Town Names Starting With
DELIMITER $$
CREATE PROCEDURE usp_get_towns_starting_with(town_start_with VARCHAR(50))
BEGIN
	SELECT t.name
	FROM towns AS t
	WHERE LOWER(t.name) LIKE CONCAT(town_start_with, '%')
	ORDER BY t.name;
END $$
DELIMITER ;

CALL usp_get_towns_starting_with('b');

4. Employees from Town
DELIMITER $$
CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(50))
BEGIN
	SELECT e.first_name, e.last_name
	FROM employees AS e
		LEFT JOIN addresses AS a
			ON e.address_id = a.address_id
		LEFT JOIN towns AS t
			ON a.town_id = t.town_id
	WHERE LOWER(t.name) LIKE LOWER(town_name)
	ORDER BY e.first_name, e.last_name, e.employee_id DESC;
END $$
DELIMITER ;

CALL usp_get_employees_from_town('Sofia');

5. Salary Level Function
DROP FUNCTION IF EXISTS ufn_get_salary_level;

DELIMITER $$
CREATE FUNCTION ufn_get_salary_level(salary DOUBLE(19,4))
RETURNS VARCHAR(8)
BEGIN
	DECLARE salary_level VARCHAR(8);
	CASE
		WHEN salary < 30000 THEN 
			SET salary_level := 'Low';
		WHEN salary BETWEEN 30000 AND 50000 THEN 
			SET salary_level := 'Average';
		WHEN salary > 50000 THEN 
			SET salary_level := 'High';
		ELSE SET salary_level := 'Error';
	END CASE;
	RETURN salary_level;
END $$
DELIMITER ;

SELECT ufn_get_salary_level(125500.00);

6. Employees by Salary Level
DROP PROCEDURE IF EXISTS usp_get_employees_by_salary_level;

DELIMITER $$
CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(8))
BEGIN
	SELECT e.first_name, e.last_name
	FROM employees AS e
	WHERE (salary_level LIKE 'Low' AND salary < 30000) OR
		(salary_level LIKE 'Average' AND salary BETWEEN 30000 AND 50000) OR
		(salary_level LIKE 'High' AND salary > 50000)
	ORDER BY e.first_name DESC, e.last_name DESC;
END $$
DELIMITER ;

CALL usp_get_employees_by_salary_level('High');

7. Define Function
DELIMITER $$
CREATE FUNCTION ufn_is_word_comprised(set_of_letters VARCHAR(50), word VARCHAR(50))
RETURNS BIT
BEGIN
	RETURN word REGEXP (CONCAT('^[', set_of_letters, ']+$'));
END $$
DELIMITER ;

SELECT ufn_is_word_comprised('oistmiahf', 'Sofia')

PART II – Queries for Bank Database
8. Find Full Name
DROP PROCEDURE IF EXISTS usp_get_holders_full_name;

DELIMITER $$
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
	SELECT CONCAT(ah.first_name, ' ', ah.last_name) AS full_name
	FROM account_holders AS ah
	ORDER BY full_name, ah.id;
END $$
DELIMITER ;

CALL usp_get_holders_full_name();

9. People with Balance Higher Than
DROP PROCEDURE IF EXISTS usp_get_holders_with_balance_higher_than;

DELIMITER $$
CREATE PROCEDURE usp_get_holders_with_balance_higher_than(selected_amount DECIMAL(19,4))
BEGIN
	SELECT ah.first_name, ah.last_name
	FROM account_holders AS ah
	INNER JOIN accounts AS a
		ON ah.id = a.account_holder_id
	GROUP BY ah.id
	HAVING SUM(a.balance) > selected_amount
	ORDER BY a.id, ah.last_name;
END $$
DELIMITER ;

CALL usp_get_holders_with_balance_higher_than(7000);

10. Future Value Function
DROP FUNCTION IF EXISTS ufn_calculate_future_value;

DELIMITER $$
CREATE FUNCTION ufn_calculate_future_value(
	deposited_sum DECIMAL(19,4), 
	yearly_interest_rate DECIMAL(5,2), 
	number_of_years INT)
RETURNS FLOAT(19,2)
BEGIN
	RETURN deposited_sum * POW(1 + yearly_interest_rate, number_of_years);
END $$
DELIMITER ;

SELECT ufn_calculate_future_value(1000, 0.1, 5);

11. Calculating Interest
DROP PROCEDURE IF EXISTS usp_calculate_future_value_for_account;

DELIMITER $$
CREATE PROCEDURE usp_calculate_future_value_for_account(account_id INT, interest_rate DECIMAL(19,4))
BEGIN
	DECLARE current_balance DECIMAL(19,4);
	DECLARE balance_in_5_years DECIMAL(19,4);
	SET current_balance := (
		SELECT a.balance 
		FROM accounts AS a
		WHERE a.id = account_id
	);
	SET balance_in_5_years := current_balance * POW(1 + interest_rate, 5);
	SELECT a.id AS account_id,
		ah.first_name,
		ah.last_name,
		current_balance,
		balance_in_5_years
	FROM accounts AS a
	INNER JOIN account_holders AS ah
		ON a.account_holder_id = ah.id
	WHERE a.id LIKE account_id;
END $$
DELIMITER ;

CALL usp_calculate_future_value_for_account(1, 0.1);

12. Deposit Money
DROP PROCEDURE IF EXISTS usp_deposit_money;

DELIMITER $$
CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF((SELECT count(account_id) FROM accounts WHERE account_id like id)<>1 OR
		money_amount < 0) THEN
		ROLLBACK;
	ELSE
		UPDATE accounts AS a
		SET a.balance = a.balance + money_amount;
		END IF;
	SELECT a.id, a.account_holder_id, a.balance
	FROM accounts AS a
	WHERE a.id = account_id;
END $$
DELIMITER ;

CALL usp_deposit_money(1, 10);

13. Withdraw Money
DROP PROCEDURE IF EXISTS usp_withdraw_money;

DELIMITER $$
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF((SELECT count(account_id) FROM accounts WHERE account_id LIKE id)<>1 OR
		money_amount < 0 OR
		(SELECT balance FROM accounts WHERE account_id LIKE id) < money_amount) THEN
		ROLLBACK;
	ELSE
		UPDATE accounts AS a
		SET a.balance = a.balance - money_amount;
		END IF;
END $$
DELIMITER ;

CALL usp_withdraw_money(1, 10);

14. Money Transfer
DROP PROCEDURE IF EXISTS usp_transfer_money;

DELIMITER $$
CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, money_amount DECIMAL(19,4))
BEGIN
	START TRANSACTION;
	IF((SELECT count(from_account_id) FROM accounts WHERE from_account_id LIKE id)<>1 OR
		(SELECT count(to_account_id) FROM accounts WHERE to_account_id LIKE id)<>1 OR
		money_amount < 0 OR
		from_account_id = to_account_id OR
		(SELECT balance FROM accounts WHERE from_account_id LIKE id) < money_amount) 
	THEN
		ROLLBACK;
	ELSE
		UPDATE accounts AS a
		SET a.balance = a.balance - money_amount
		WHERE a.id LIKE from_account_id;
		UPDATE accounts AS a
		SET a.balance = a.balance + money_amount
		WHERE a.id LIKE to_account_id;
		END IF;
END $$
DELIMITER ;

CALL usp_transfer_money(1, 2, 10);

15. Log Accounts Trigger
DROP TABLE IF EXISTS `logs`;

CREATE TABLE `logs`(
	log_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	account_id INT NOT NULL, 
	old_sum DECIMAL(19,4), 
	new_sum DECIMAL(19,4)
);

DROP TRIGGER IF EXISTS tr_change_balance;

DELIMITER $$
CREATE TRIGGER tr_change_balance
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
	INSERT INTO `logs`(account_id, old_sum, new_sum)
	VALUES(OLD.id, OLD.balance, NEW.balance);
END $$
DELIMITER ;

16. Emails Trigger
DROP TABLE IF EXISTS `logs`;

CREATE TABLE `logs`(
	log_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	account_id INT NOT NULL, 
	old_sum DECIMAL(19,4), 
	new_sum DECIMAL(19,4)
);

DROP TABLE IF EXISTS notification_emails;

CREATE TABLE notification_emails(
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	recipient INT NOT NULL, 
	subject VARCHAR(50), 
	body TEXT
);

DROP TRIGGER IF EXISTS tr_record_insert;

DELIMITER $$
CREATE TRIGGER tr_record_insert
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
	INSERT INTO `logs`(account_id, old_sum, new_sum)
	VALUES(OLD.id, OLD.balance, NEW.balance);
	INSERT INTO notification_emails(recipient, subject, body)
	VALUES(OLD.id, 
	CONCAT('Balance change for account: ', OLD.id), 
	CONCAT('On ', 
			CURRENT_DATE(), 
			' at ', 
			CURRENT_TIME(), 
			' your balance was changed from ', 
			OLD.balance, 
			' to ', 
			NEW.balance, 
			'.'));
END $$
DELIMITER ;