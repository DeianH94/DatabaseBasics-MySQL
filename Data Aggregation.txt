1. Recordsâ€™ Count
SELECT 
	COUNT(*) AS `count`
FROM wizzard_deposits AS e;

2. Longest Magic Wand
SELECT 
	MAX(e.magic_wand_size) AS longest_magic_wand
FROM wizzard_deposits AS e;

3. Longest Magic Wand per Deposit Groups
SELECT e.deposit_group,
	MAX(e.magic_wand_size) AS longest_magic_wand
FROM wizzard_deposits AS e
GROUP BY e.deposit_group
ORDER BY longest_magic_wand, e.deposit_group;

4. Smallest Deposit Group per Magic Wand Size*
SELECT e.deposit_group
FROM wizzard_deposits AS e
GROUP BY e.deposit_group
ORDER BY AVG(e.magic_wand_size) LIMIT 1;

5. Deposits Sum
SELECT e.deposit_group,
	SUM(e.deposit_amount) AS total_sum
FROM wizzard_deposits AS e
GROUP BY e.deposit_group
ORDER BY total_sum;

6. Deposits Sum for Ollivander family
SELECT deposit_group,
	SUM(deposit_amount) AS total_sum
FROM wizzard_deposits
WHERE LOWER(magic_wand_creator) LIKE "ollivander family"
GROUP BY deposit_group;

7. Deposits Filter
SELECT deposit_group,
	SUM(deposit_amount) AS total_sum
FROM wizzard_deposits
WHERE LOWER(magic_wand_creator) LIKE "ollivander family"
GROUP BY deposit_group
HAVING total_sum < 150000
ORDER BY total_sum DESC;

8. Deposit charge
SELECT deposit_group, magic_wand_creator,
	MIN(deposit_charge) AS min_deposit_charge
FROM wizzard_deposits
GROUP BY deposit_group, magic_wand_creator
ORDER BY magic_wand_creator, deposit_group;

9. Age Groups
SELECT 
CASE
	WHEN age BETWEEN 0 AND 10 THEN '[0-10]'
	WHEN age BETWEEN 11 AND 20 THEN '[11-20]'
	WHEN age BETWEEN 21 AND 30 THEN '[21-30]'
	WHEN age BETWEEN 31 AND 40 THEN '[31-40]'
	WHEN age BETWEEN 41 AND 50 THEN '[41-50]'
	WHEN age BETWEEN 51 AND 60 THEN '[51-60]'
	ELSE '[61+]'
END AS age_group,
COUNT(*) AS wizzard_count
FROM wizzard_deposits
GROUP BY age_group;

10. First Letter
SELECT SUBSTRING(first_name, 1, 1) AS first_letter
FROM wizzard_deposits
WHERE deposit_group = "Troll Chest"
GROUP BY first_letter;

11. Average Interest
SELECT deposit_group, is_deposit_expired, AVG(deposit_interest) AS average_interest
FROM wizzard_deposits
WHERE deposit_start_date > '1985-01-01'
GROUP BY deposit_group, is_deposit_expired
ORDER BY deposit_group DESC, is_deposit_expired;

12. Rich Wizard, Poor Wizard*
SELECT 
	SUM(w1.deposit_amount - w2.deposit_amount) AS sum_difference
FROM 
	wizzard_deposits w1
		INNER JOIN
	wizzard_deposits w2 ON w2.id = w1.id + 1;
	
13. Employees Minimum Salaries
SELECT
	department_id, 
	MIN(salary) AS minimum_salary
FROM employees
WHERE
	DATE(hire_date) > '2000-01-01'
GROUP BY department_id
HAVING department_id IN (2, 5, 7);

14. Employees Average Salaries
CREATE TABLE high_paid_employees
AS
	SELECT * FROM employees
	WHERE salary > 30000;
	
DELETE FROM high_paid_employees
WHERE manager_id = 42;

UPDATE high_paid_employees
	SET salary = salary + 5000
	WHERE department_id = 1;
	
SELECT 
	department_id, 
	AVG(salary) AS avg_salary
FROM high_paid_employees
GROUP BY department_id;

15. Employees Maximum Salaries
SELECT department_id, MAX(salary) AS max_salary
FROM employees
GROUP BY department_id
HAVING NOT (max_salary BETWEEN 30000 AND 70000);

16. Employees Count 
SELECT COUNT(salary) AS salary_count
FROM employees
WHERE manager_id IS NULL;

17. 3rd Highest Salary*
SELECT
	eOne.department_id,
    (SELECT DISTINCT
		eTwo.salary
    FROM
		employees AS eTwo
	WHERE
	    eOne.department_id = eTwo.department_id
	ORDER BY eTwo.salary DESC
    LIMIT 1 OFFSET 2)
AS third_highest_salary
FROM
    employees AS eOne
GROUP BY eOne.department_id
HAVING third_highest_salary IS NOT NULL
ORDER BY eOne.department_id;

18. Salary Challenge**
